{"version":3,"sources":["Table/Component.js","Table/index.js","FileOpen/helpers.js","FileOpen/index.js","FileOpen/Component.js","App.js","serviceWorker.js","index.js"],"names":["Component","withStyles","theme","root","padding","_ref","classes","title","columns","data","options","rowsPerPage","rowsPerPageOptions","downloadOptions","filename","separator","map","name","customBodyRender","value","tableMeta","updateValue","note","replace","length","maxNoteLength","substring","react_default","a","createElement","react_markdown_default","source","className","dist_default","handleTsvFileObject","Object","asyncToGenerator","regenerator_default","mark","_callee","fileObject","text","tsv","wrap","_context","prev","next","pFileReader","sent","tsvParse","abrupt","stop","this","_x","apply","arguments","split","line","filter","shift","Promise","resolve","reject","fileReader","FileReader","onload","e","target","result","readAsText","fab","margin","spacing","unit","setFile","lib","extensions","onChange","_ref2","file","helpers","onError","errMsg","alert","index_es","color","aria-label","icons_index_es","App","_useState","useState","_useState2","slicedToArray","Table","FileOpen","bind","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a288af01.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport MUIDataTable from 'mui-datatables';\nimport ReactMarkdown from 'react-markdown';\n\nfunction TableComponent({\n  classes,\n  title,\n  columns,\n  data,\n}) {\n  const options = {\n    rowsPerPage: 10,\n    rowsPerPageOptions: [10, 25, 50, 100],\n    downloadOptions: {\n      filename: title,\n      separator: '\\t',\n    },\n  };\n  if (columns) {\n    columns = columns.map(name => ({\n      name,\n      options: {\n        customBodyRender: (value, tableMeta, updateValue) => {\n          const maxNoteLength = 500;\n          let note = \"\";\n          if (value) {\n            value = value.replace(/<br>/gi, '\\n');\n            if (value.length <= (maxNoteLength - 3)) {\n              note = value;\n            } else {\n              note = value.substring(0,maxNoteLength) + '...';\n            }\n          }\n          return (\n            <ReactMarkdown source={note} />\n          );\n        },\n      }\n    }));\n  }\n\n  return (\n    <div className={classes.root}>\n      <MUIDataTable\n        title={title}\n        data={data}\n        columns={columns}\n        options={options}\n      />\n    </div>\n  );\n};\n\nTableComponent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  columns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n};\n\nconst styles = theme => ({\n  root: {\n    padding: '1em',\n  },\n});\n\nexport default withStyles(styles)(TableComponent);\n","import Component from './Component';\nexport default Component;\n","\nexport const handleTsvFileObject = async (fileObject) => {\n  let title, columns, data;\n  if (fileObject) {\n    const text = await pFileReader(fileObject);\n    const tsv = tsvParse(text);\n    columns = tsv.columns;\n    data = tsv.data;\n    title = fileObject.name;\n  };\n  return {title, columns, data};\n};\n\nexport const tsvParse = (text) => {\n  let tsv = {};\n  if (text) {\n    const data = text.split('\\n')\n    .map(line => line.split('\\t'))\n    .filter(line => line && line.length > 1);\n    const columns = data.shift();\n    tsv = {\n      columns,\n      data,\n    };\n  }\n  return tsv;\n};\n\nexport const pFileReader = (fileObject) => {\n  return new Promise((resolve, reject) => {\n    var fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      const data = e.target.result;\n      resolve(data);\n    };\n    fileReader.readAsText(fileObject);\n  });\n};\n","import Component from './Component';\nexport default Component;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FilePicker } from 'react-file-picker';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n  Fab,\n} from '@material-ui/core';\nimport {\n  CloudUpload,\n} from '@material-ui/icons';\n\nimport * as helpers from './helpers';\n\nconst FileOpenComponent = ({\n  classes,\n  setFile,\n}) => {\n\n  return (\n    <FilePicker\n      extensions={['tsv']}\n      onChange={ async (fileObject) => {\n        const file = await helpers.handleTsvFileObject(fileObject);\n        setFile(file);\n      }}\n      onError={errMsg => {\n        alert(errMsg);\n      }}\n    >\n      <Fab color=\"primary\" aria-label=\"Add\" className={classes.fab}>\n        <CloudUpload />\n      </Fab>\n    </FilePicker>\n  );\n};\n\nFileOpenComponent.propTypes = {\n  classes: PropTypes.object.isRequired,\n  setFile: PropTypes.func.isRequired,\n};\n\nconst styles = theme => ({\n  fab: {\n    margin: theme.spacing.unit,\n  },\n});\n\nexport default withStyles(styles)(FileOpenComponent);\n","import React, {useState} from 'react';\nimport './App.css';\n\nimport Table from './Table';\nimport FileOpen from './FileOpen';\n\nconst App = () => {\n  const [file, setFile] = useState({});\n  return (\n    <div className=\"App\">\n      <Table title={file.title} columns={file.columns} data={file.data} />\n      <FileOpen setFile={setFile.bind(this)} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}